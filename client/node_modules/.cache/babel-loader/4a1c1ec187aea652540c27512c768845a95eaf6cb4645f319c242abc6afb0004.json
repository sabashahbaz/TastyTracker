{"ast":null,"code":"var _jsxFileName = \"/Users/saba/Desktop/TastyTracker/client/src/Components/ProgressBar.js\";\nimport React, { useState } from 'react';\nimport CSS from \"../CSS/ProgressBar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProgressBar({\n  caloriesIAte,\n  currentTdee\n}) {\n  // Calculate the percentage of caloriesIAte relative to currentTdee\n  const percentage = caloriesIAte / currentTdee * 100;\n\n  // Determine the color based on whether caloriesIAte exceeds currentTdee\n  const getColor = () => {\n    if (caloriesIAte < currentTdee) {\n      return \"#50C878\"; // Purple if caloriesIAte is less than currentTdee\n    } else {\n      return \"#FF0000\"; // Red if caloriesIAte is greater than or equal to currentTdee\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fill\",\n        style: {\n          width: `${percentage}%`,\n          backgroundColor: getColor()\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 1\n  }, this);\n}\n_c = ProgressBar;\nexport default ProgressBar;\nvar _c;\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"names":["React","useState","CSS","jsxDEV","_jsxDEV","ProgressBar","caloriesIAte","currentTdee","percentage","getColor","className","children","style","width","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/saba/Desktop/TastyTracker/client/src/Components/ProgressBar.js"],"sourcesContent":["import React, {useState} from 'react'\nimport CSS from \"../CSS/ProgressBar.css\"\n\nfunction ProgressBar ({caloriesIAte, currentTdee}) {\n\n// Calculate the percentage of caloriesIAte relative to currentTdee\nconst percentage = (caloriesIAte / currentTdee) * 100;\n\n// Determine the color based on whether caloriesIAte exceeds currentTdee\nconst getColor = () => {\n  if (caloriesIAte < currentTdee) {\n    return \"#50C878\"; // Purple if caloriesIAte is less than currentTdee\n  } else {\n    return \"#FF0000\"; // Red if caloriesIAte is greater than or equal to currentTdee\n  }\n};\n\nreturn (\n<div className=\"container\">\n    <div className=\"bar\">\n      {/* Set the width dynamically based on the percentage */}\n    <div\n        className=\"fill\"\n        style={{\n        width: `${percentage}%`,\n        backgroundColor: getColor(),\n        }}\n    ></div>\n    </div>\n    {/* <div className=\"label\">{percentage.toFixed(2)}%</div> */}\n  </div>\n);\n}\n\nexport default ProgressBar;\n\n\n\n\n\n\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAOC,GAAG,MAAM,wBAAwB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,WAAWA,CAAE;EAACC,YAAY;EAAEC;AAAW,CAAC,EAAE;EAEnD;EACA,MAAMC,UAAU,GAAIF,YAAY,GAAGC,WAAW,GAAI,GAAG;;EAErD;EACA,MAAME,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAIH,YAAY,GAAGC,WAAW,EAAE;MAC9B,OAAO,SAAS,CAAC,CAAC;IACpB,CAAC,MAAM;MACL,OAAO,SAAS,CAAC,CAAC;IACpB;EACF,CAAC;;EAED,oBACAH,OAAA;IAAKM,SAAS,EAAC,WAAW;IAAAC,QAAA,eACtBP,OAAA;MAAKM,SAAS,EAAC,KAAK;MAAAC,QAAA,eAEpBP,OAAA;QACIM,SAAS,EAAC,MAAM;QAChBE,KAAK,EAAE;UACPC,KAAK,EAAG,GAAEL,UAAW,GAAE;UACvBM,eAAe,EAAEL,QAAQ,CAAC;QAC1B;MAAE;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEH,CAAC;AAER;AAACC,EAAA,GA7BQd,WAAW;AA+BpB,eAAeA,WAAW;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}